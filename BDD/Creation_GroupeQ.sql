/*
FIchier : Creation_GroupeQ.sql
Auteurs : 
Dassoukhi Saleh 21613755
Fontaine Quentin 21611404
Prud'Homme Gateau Sebastien 21712267
Nom du groupe : Q
*/


DROP DATABASE IF EXISTS EVENT;
CREATE DATABASE EVENT;
USE EVENT;

/*
Création de la base de  données
*/

DROP TABLE IF EXISTS PARTICIPE;
DROP TABLE IF EXISTS EVENEMENT;
DROP TABLE IF EXISTS ROLE;
DROP TABLE IF EXISTS PERSONNE;
DROP TABLE  IF EXISTS LOGERROR;

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;


--
-- Base de données :  event
--

-- --------------------------------------------------------

--
-- Structure de la table evenement
--
CREATE TABLE IF NOT EXISTS EVENEMENT (
  ID_E int(4) NOT NULL AUTO_INCREMENT,
  NOM_E varchar(100) NOT NULL,
  ADRESSE text NOT NULL,
  LONGITUDE decimal(11,8) NOT NULL,
  LATITUDE decimal(10,8) NOT NULL,
  THEME text,
  DATE_D timestamp NOT NULL,
  DATE_F timestamp NOT NULL,
  DESCRIPTION text,
  EFFECTIF_MIN int(7),
  EFFECTIF_MAX int(7),
  AGE_MIN int(3),
  CHEMIN_IMAGE VARCHAR(100) NOT NULL,
  ID_R int(4) NOT NULL, 
  CONSTRAINT PK_EVENEMENT PRIMARY KEY (ID_E),
  CONSTRAINT FK_PERSONNE_R FOREIGN KEY (ID_R) REFERENCES ROLE(ID_R)
);

--
-- Structure de la table role
--
CREATE TABLE ROLE (
  ID_R int(4) NOT NULL,
  TYPE set('ADMINISTRATEUR','CONTRIBUTEUR','VISITEUR') NOT NULL,
  CONSTRAINT PK_ROLE PRIMARY KEY (ID_R)
);

--
-- Structure de la table personne
--
CREATE TABLE IF NOT EXISTS PERSONNE (
  ID_P int(4) NOT NULL AUTO_INCREMENT,
  PSEUDO varchar(50) NOT NULL,
  DATE_NAISSANCE DATE,
  MDP varchar(100) NOT NULL,
  ID_R int(4) NOT NULL, 
  CONSTRAINT PK_PERSONNE PRIMARY KEY (ID_P),
  CONSTRAINT U_PSEUDO UNIQUE KEY PSEUDO (PSEUDO),
  CONSTRAINT FK_PERSONNE_ROLE FOREIGN KEY (ID_R) REFERENCES ROLE(ID_R)
);

--
-- Structure de la table participe
--
CREATE TABLE PARTICIPE (
  ID_P int(4) NOT NULL,
  ID_E int(4) NOT NULL,
  CONSTRAINT FK_PARTICIPE_PERSONNE FOREIGN KEY (ID_P) REFERENCES PERSONNE(ID_P),
  CONSTRAINT FK_PARTICIPE_EVENEMENT FOREIGN KEY (ID_E) REFERENCES EVENEMENT(ID_E),
  CONSTRAINT PK_PARTICIPE PRIMARY KEY (ID_P,ID_E)
);

--
-- Structure de la table logerreur
--
CREATE TABLE LOGERROR  (
  ID INT(11) AUTO_INCREMENT,
  MESSAGE VARCHAR(255) DEFAULT NULL,
  THETIME TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT PK_LOGERROR PRIMARY KEY (ID)
);  



-- --------------------------------------------------------

--
-- Insertion
--
INSERT INTO ROLE VALUES (0,"ADMINISTRATEUR");
INSERT INTO ROLE VALUES (1,"CONTRIBUTEUR");
INSERT INTO ROLE VALUES (2,"VISITEUR");

INSERT INTO PERSONNE VALUES (NULL,"DASS","1996-11-29","123456789",0);
INSERT INTO PERSONNE VALUES (NULL,"HURRY","1998-12-19","123",0);
INSERT INTO PERSONNE VALUES (NULL,"SEBAELLE","1990-02-14","777",0);
INSERT INTO PERSONNE VALUES (NULL,"MOMO","1998-08-16","123",2);
INSERT INTO PERSONNE VALUES (NULL,"ANT-MAN","1999-07-25","123",2);
INSERT INTO PERSONNE VALUES (NULL,"JULES","2000-4'-22","123",2);

INSERT INTO EVENEMENT VALUES (NULL,"BIG FAT ASS","125 AVENUE AUGUSTIN FLICHE",3,43,"SEXE","2020-12-21 03:00:00","2020-12-21 12:00:00",NULL,NULL,NULL,20,"im1.jpg",0);
INSERT INTO EVENEMENT VALUES (NULL,"A","125 AVENUE AUGUSTIN FLICHE",3,43,"HUMOUR","2019-12-29 03:00:00","2019-12-30 07:00:00",NULL,NULL,5,NULL,"im2.jpg",0);
INSERT INTO EVENEMENT VALUES (NULL,"B","125 AVENUE AUGUSTIN FLICHE",3,43,"CONFERENCE","2019-12-31 03:00:00","2020-12-21 09:00:00",NULL,NULL,2,15,"im3.jpg",1);


INSERT INTO PARTICIPE VALUES (6,2);
INSERT INTO PARTICIPE VALUES (5,2);
INSERT INTO PARTICIPE VALUES (5,1);
INSERT INTO PARTICIPE VALUES (2,3);
INSERT INTO PARTICIPE VALUES (5,3);


-- --------------------------------------------------------

--
-- Trigger
--

-- 
DROP TRIGGER IF EXISTS NON_DANS_ROLE;
DELIMITER $$
CREATE TRIGGER NON_DANS_ROLE
  BEFORE INSERT ON ROLE
  FOR EACH ROW
BEGIN
  IF NEW.ID_R < 0 OR NEW.ID_R > 2 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : TYPE DE ROLE INCOMPATIBLE");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "VOUS NE POUVEZ PAS CREER DE ROLE !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS AGE_REQUIS;
DELIMITER $$
CREATE TRIGGER AGE_REQUIS
  BEFORE INSERT ON PARTICIPE
  FOR EACH ROW
BEGIN
	DECLARE MIN int(2);
	DECLARE age_P int(2);
	SET MIN = (SELECT AGE_MIN FROM EVENEMENT WHERE ID_E =NEW.ID_E);
	SET age_P = (SELECT CALCUL_AGE_PERSONNE(NEW.ID_P)); -- Appel de la fonction AGE_PERSONNE définie ci-dessous

  IF MIN > age_P THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : AGE INFERIEUR ");
    SIGNAL SQLSTATE VALUE '45001' SET MESSAGE_TEXT = "VOTRE AGE NE VOUS PERMET PAS DE S'INSCRIRE à CET EVENEMENT !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS ROLE_EXIST;
DELIMITER $$
CREATE TRIGGER ROLE_EXIST
  BEFORE INSERT ON PERSONNE
  FOR EACH ROW
BEGIN
  IF NEW.ID_R < 0 OR NEW.ID_R > 2 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : ROLE INEXISTANT");
    SIGNAL SQLSTATE VALUE '45001' SET MESSAGE_TEXT = "VOUS DEVEZ CHOISIR UN ROLE ENTRE 'ADMINISTRATEUR(0)', 'CONTRIBUTEUR(1)' OU 'VISITEUR(2)' !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS ACCEES_PRIORITAIRE;
DELIMITER $$
CREATE TRIGGER ACCEES_PRIORITAIRE
  BEFORE INSERT ON EVENEMENT 
  FOR EACH ROW
BEGIN
  IF NEW.ID_R < 0 OR  NEW.ID_R > 1 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : AJOUT INTERDIT AU VISITEUR");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "SEULS LES ADMINISTRATEUR ET LES CONTRIBUTEURS PEUVENT AJOUTER UN EVENEMENT !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS DEPASSE_DATE;
DELIMITER $$
CREATE TRIGGER DEPASSE_DATE
  BEFORE INSERT ON EVENEMENT 
  FOR EACH ROW
BEGIN

	DECLARE jour int(2);
	DECLARE mois int(2);
	DECLARE anne int(4);
	SET jour =(SELECT day(NEW.DATE_F));
	SET mois = (SELECT month(NEW.DATE_F));
	SET anne = (SELECT year(NEW.DATE_F));

  IF (jour - day(now())) < 0 and (mois - month(now())) <= 0 and (anne -year(now())) <= 0 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : DATE EVENT DEPASSEE");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "LA DATE DE L'EVENEMENT QUE VOUS ESSAYER D'AJOUTER EST DEPASSER !";
  
  ELSEIF (mois - month(now())) < 0 and (anne -year(now())) <= 0 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : DATE EVENT DEPASSEE");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "LA DATE DE L'EVENEMENT QUE VOUS ESSAYER D'AJOUTER EST DEPASSER !";
  
  ELSEIF  (anne -year(now())) < 0 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : DATE EVENT DEPASSEE");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "LA DATE DE L'EVENEMENT QUE VOUS ESSAYER D'AJOUTER EST DEPASSER !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS PAS_DE_PLACE;
DELIMITER $$
CREATE TRIGGER PAS_DE_PLACE
  BEFORE INSERT ON PARTICIPE 
  FOR EACH ROW
BEGIN
	DECLARE RESULTAT VARCHAR(50);
	SET RESULTAT= (SELECT NB_PLACE(NEW.ID_E)); -- appel de le focntion NB_PLACE definie ci-dessous
  IF RESULTAT ="Il n'y a plus de places de disponibles !" THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : PLUS DES PLACES DISPONIBLE ");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "DESOLE ON PEUT PAS VOUS INSCRIRE DANS CET EVENEMENT, LA SALLE EST PLEINE !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS DISTANCE_AUTORISEE;
DELIMITER $$
CREATE TRIGGER DISTANCE_AUTORISEE
	BEFORE INSERT ON EVENEMENT
	FOR EACH ROW
BEGIN
	DECLARE DIS decimal(11,8);
	SET DIS = (SELECT DISTANCE_ENTRE_ADRESSE(NEW.LONGITUDE,NEW.LATITUDE)); -- appel de le focntion DISTANCE_ENTRE_ADRESSE definie ci-dessous
  IF DIS > 30.0 THEN
	INSERT INTO LOGERROR(MESSAGE) VALUES ("ERREUR : DISTANCE AUTORISEE DEPASSEE");
	SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "L'EVENEMENT NE PEUT PAS ETRE A PLUS DE 30KM AUTOUR MONTPELLIER !";
  END IF;
END; $$
DELIMITER ;




-- --------------------------------------------------------

--
-- Fonctions
--


DROP FUNCTION IF EXISTS NB_PLACE
DELIMITER $$
CREATE FUNCTION NB_PLACE (ID_E int(4))
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
  DECLARE NB int(7);
  DECLARE NB_MAX int(7);

  SET NB = (SELECT COUNT(*) FROM PARTICIPE WHERE PARTICIPE.ID_E=ID_E);
  SET NB_MAX = (SELECT EFFECTIF_MAX FROM EVENEMENT WHERE EVENEMENT.ID_E=ID_E);
  IF NB_MAX IS NULL THEN
    RETURN("Les places de cet évènement sont illimitées !");
  ELSE
    IF NB < NB_MAX THEN
      RETURN CONCAT("Il reste ",CONCAT(NB_MAX-NB," place(s) disponible(s) !"));
    ELSE
      RETURN("Il n'y a plus de places de disponibles !");
    END IF;
  END IF;
END; $$
DELIMITER ;



DROP FUNCTION IF EXISTS JOURS_AVANT_EVENT
DELIMITER $$
CREATE FUNCTION JOURS_AVANT_EVENT (ID_E int(4))
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
	DECLARE DATE_TODAY TIMESTAMP;
  	DECLARE DATE_eve TIMESTAMP;
  	DECLARE diff_j int(2);
  	DECLARE diff_m int(2);
  	DECLARE diff_an int(4);
  	DECLARE resultat VARCHAR(70);
  SET DATE_TODAY = NOW();

  SET DATE_eve = (SELECT DATE_D FROM EVENEMENT WHERE EVENEMENT.ID_E=ID_E);
  SET diff_j = day(DATE_eve) - day(DATE_TODAY);
  SET diff_m = month(DATE_eve) - month(DATE_TODAY);
  SET diff_an = year(DATE_eve) - year(DATE_TODAY);
  SET resultat = "il reste";

	  IF diff_j > 0  THEN

	  	SET resultat =CONCAT(resultat, CONCAT(" ",CONCAT(diff_j," jours")));
	  END IF;
	  IF diff_m > 0  THEN

	  	SET resultat =CONCAT(resultat, CONCAT(" ",CONCAT(diff_j," mois")));
	  END IF;
	  IF diff_an > 0  THEN

		SET resultat =CONCAT(resultat, CONCAT(" ",CONCAT(diff_j," an(s)")));
	  END IF;
	  IF diff_an <= 0 and diff_j <= 0 and diff_m <= 0 THEN

		SET resultat ="CET EVENEMENT S'EST DEJA DEROULE";
	  END IF;

  
  RETURN (resultat);
END; $$
DELIMITER ;


DROP FUNCTION IF EXISTS CALCUL_AGE_PERSONNE
DELIMITER $$
CREATE FUNCTION CALCUL_AGE_PERSONNE (ID_Per int(4))
RETURNS int(3)
DETERMINISTIC
BEGIN
  DECLARE age_P int(3);
  DECLARE AGE_Now int(3);
  SET AGE_Now = (SELECT year(now()));

  SET age_P = (SELECT year(DATE_NAISSANCE) FROM PERSONNE WHERE ID_P=ID_Per);
  RETURN(AGE_Now - age_P);
END; $$
DELIMITER ;


DROP FUNCTION IF EXISTS DUREE_EVENT
DELIMITER $$
CREATE FUNCTION DUREE_EVENT(ID_eve int(4))
RETURNS int(5)
DETERMINISTIC
BEGIN
	DECLARE debut TIMESTAMP ;
	DECLARE fin TIMESTAMP ;
	DECLARE resultat int(5);
	SET debut = (SELECT DATE_D from EVENEMENT WHERE ID_E = ID_eve);
	SET fin = (SELECT DATE_F from EVENEMENT WHERE ID_E = ID_eve);
	SET resultat = (select TIMESTAMPDIFF(HOUR,debut,fin));

	RETURN (resultat);
END; $$
DELIMITER ;	



DROP FUNCTION IF EXISTS NB_PERSONNE_INSCRIT
DELIMITER $$
CREATE FUNCTION NB_PERSONNE_INSCRIT (ID_eve int(4))
RETURNS int(6)
DETERMINISTIC
BEGIN
  DECLARE resultat int(6);
 
  SET resultat = (SELECT count(*) FROM PARTICIPE WHERE ID_E = ID_eve);

  RETURN(resultat);
END; $$
DELIMITER ;



DROP FUNCTION IF EXISTS DISTANCE_ENTRE_ADRESSE --distance entre (longitude/latitude du centre de montpellier et longitude/latitude quelconques passer en parametre)
DELIMITER $$
CREATE FUNCTION DISTANCE_ENTRE_ADRESSE (longitude decimal(11,8), latitude decimal(10,8))
RETURNS decimal(11,8)
DETERMINISTIC
BEGIN
  DECLARE SPHERE_TERRE int(7);
  DECLARE LONGITUDE_MTP decimal(11,8);
  DECLARE LATITUDE_MTP decimal(10,8);
  DECLARE RADIAN_LON_MTP decimal(11,8);
  DECLARE RADIAN_LAT_MTP decimal(11,8);
  DECLARE RADIAN_NEW_LON decimal(11,8);
  DECLARE RADIAN_NEW_LAT decimal(11,8);
  DECLARE DIST_LON decimal(11,8);
  DECLARE DIST_LAT decimal(11,8);
  DECLARE ETAPE1  decimal(11,8);
  DECLARE ETAPE2  decimal(11,8);
  DECLARE resultat  decimal(11,8);

  SET LONGITUDE_MTP = 3.879446; -- longitude du centre de montpellier
  SET LATITUDE_MTP = 43.608177; -- latitude du centre de montpellier 
  SET SPHERE_TERRE = 6378137; -- sphere de la terre est egale 6378137 km de rayon
  SET RADIAN_LON_MTP = RADIANS(LONGITUDE_MTP); -- conversion de degré en radian
  SET RADIAN_LAT_MTP = RADIANS(LATITUDE_MTP);  -- ............................
  SET RADIAN_NEW_LON = RADIANS(longitude);    -- ..........................
  SET RADIAN_NEW_LAT = RADIANS(latitude);      -- .........................
  SET DIST_LON = (RADIAN_NEW_LON - RADIAN_LON_MTP)/2; -- moyenne de la difference entre 2 longitude
  SET DIST_LAT = (RADIAN_NEW_LAT - RADIAN_LAT_MTP)/2; -- moyenne de la difference entre 2 latitude
  SET ETAPE1 = POWER(SIN(DIST_LAT),2) + (COS(RADIAN_LAT_MTP)*COS(RADIAN_NEW_LAT)*POWER(SIN(DIST_LON),2)); -- formule de la distance entre deux coordonnees de la terre
  SET ETAPE2 = 2 * ATAN2(SQRT(ETAPE1),SQRT(1 - ETAPE1)); -- suite de la formule......................
  SET resultat = (SPHERE_TERRE * ETAPE2)/1000; -- multiplication par le rayon de la terre pour ne pas avoir une distance superieur à la circonferance de la terre et on divise par 1000 pour avoir la distance en km

  RETURN(resultat);
END; $$
DELIMITER ;


