/*
FIchier : Creation_GroupeQ.sql
Auteurs : 
Dassoukhi Saleh 21613755
Fontaine Quentin 21611404
Prud'Homme Gateau Sebastien 21712267
Nom du groupe : Q
*/


DROP DATABASE IF EXISTS EVENT;
CREATE DATABASE EVENT;
USE EVENT;

/*
Création de la base de  données
*/

DROP TABLE IF EXISTS NOTATION;
DROP TABLE IF EXISTS PARTICIPE;
DROP TABLE IF EXISTS EVENEMENT;
DROP TABLE IF EXISTS PERSONNE;
DROP TABLE IF EXISTS ROLE;
DROP TABLE  IF EXISTS LOGERROR;

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;


--
-- Base de données :  event
--

-- --------------------------------------------------------

--
-- Structure de la table personne
--
CREATE TABLE IF NOT EXISTS ROLE(
  ID_R int(4) NOT NULL AUTO_INCREMENT,
  TYPE SET('ADMINISTRATEUR','CONTRIBUTEUR','VISITEUR') NOT NULL,
  CONSTRAINT PK_ROLE PRIMARY KEY (ID_R)
);

--
-- Structure de la table personne
--
CREATE TABLE IF NOT EXISTS PERSONNE (
  ID_P int(4) NOT NULL AUTO_INCREMENT,
  PSEUDO varchar(50) NOT NULL,
  DATE_NAISSANCE DATE,
  MDP varchar(100) NOT NULL,
  ID_R int(4) NOT NULL,
  CONSTRAINT PK_PERSONNE PRIMARY KEY (ID_P),
  CONSTRAINT U_PSEUDO UNIQUE KEY (PSEUDO),
  CONSTRAINT FK_PERSONNE_ROLE FOREIGN KEY (ID_R) REFERENCES ROLE(ID_R)
);


--
-- Structure de la table evenement
--
CREATE TABLE IF NOT EXISTS EVENEMENT (
  ID_E int(4) NOT NULL AUTO_INCREMENT,
  NOM_E varchar(100) NOT NULL,
  ADRESSE text NOT NULL,
  LONGITUDE decimal(11,8) NOT NULL,
  LATITUDE decimal(10,8) NOT NULL,
  THEME text,
  DATE_D timestamp NOT NULL,
  DATE_F timestamp NOT NULL,
  DESCRIPTION text,
  EFFECTIF_MIN int(7) DEFAULT NULL,
  EFFECTIF_MAX int(7) DEFAULT NULL,
  AGE_MIN varchar(30) DEFAULT NULL,
  CHEMIN_IMAGE varchar(100) NOT NULL,
  VISIBLE int(1),
  ID_P int(4) NOT NULL,
  CONSTRAINT PK_EVENEMENT PRIMARY KEY (ID_E),
  CONSTRAINT FK_EVENEMENT_PERSONNE FOREIGN KEY (ID_P) REFERENCES PERSONNE(ID_P),
  CONSTRAINT C_EVENEMENT_AGE CHECK (AGE_MIN IN('Aucun âge requis','Mineur (à partir de 16 ans)','Majeur')),
  CONSTRAINT C_EVENEMENT_THEME CHECK (THEME IN('CARITATIF','CONCERT','ÉTUDIANT','SHOWCASE','SPORT'))
);

--
-- Structure de la table participe
--
CREATE TABLE IF NOT EXISTS PARTICIPE (
  ID_P int(4) NOT NULL,
  ID_E int(4) NOT NULL,
  CONSTRAINT FK_PARTICIPE_PERSONNE FOREIGN KEY (ID_P) REFERENCES PERSONNE(ID_P),
  CONSTRAINT FK_PARTICIPE_EVENEMENT FOREIGN KEY (ID_E) REFERENCES EVENEMENT(ID_E),
  CONSTRAINT PK_PARTICIPE PRIMARY KEY (ID_P,ID_E)
);

--
-- Structure de la table participe
--
CREATE TABLE IF NOT EXISTS NOTATION (
  ID_P int(4) NOT NULL,
  ID_E int(4) NOT NULL,
  NOTE int(1) NOT NULL,
  CONSTRAINT PK_NOTE PRIMARY KEY (ID_P,ID_E),
  CONSTRAINT FK_NOTE_PERSONNE FOREIGN KEY (ID_P) REFERENCES PERSONNE(ID_P),
  CONSTRAINT FK_NOTE_EVENEMENT FOREIGN KEY (ID_E) REFERENCES EVENEMENT(ID_E)
);

--
-- Structure de la table logerreur
--
CREATE TABLE IF NOT EXISTS LOGERROR  (
  ID INT(11) AUTO_INCREMENT,
  MESSAGE VARCHAR(255) DEFAULT NULL,
  THETIME TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT PK_LOGERROR PRIMARY KEY (ID)
);  


-- --------------------------------------------------------

--
-- Insertion
--
INSERT INTO ROLE VALUES (0,'ADMINISTRATEUR');
INSERT INTO ROLE VALUES (1,'CONTRIBUTEUR');
INSERT INTO ROLE VALUES (2,'VISITEUR');

INSERT INTO PERSONNE VALUES (NULL,'Dassoukhi','1996-09-17','zzzz',0);
INSERT INTO PERSONNE VALUES (NULL,'Sebastien','1999-04-19','eeee',0);
INSERT INTO PERSONNE VALUES (NULL,'Sebaelle','2019-02-14','rrrr',1);
INSERT INTO PERSONNE VALUES (NULL,'Momo','1998-08-16','tttt',2);
INSERT INTO PERSONNE VALUES (NULL,'ANT-MAN','1999-07-25','antoinette',1);
INSERT INTO PERSONNE VALUES (NULL,'Jules','1999-12-22','jjjj',2);

INSERT INTO EVENEMENT VALUES (NULL,'Fize 2019','Rives du Lez, 34000 Montpellier',3.894846,43.604221,'SPORT','2019-05-29 08:00:00','2019-06-02 23:00:00','Le Rendez-vous des vrais RiderZ de l\'Xtreme',NULL,NULL,'Aucun âge requis','1.jpg',1,3);
INSERT INTO EVENEMENT VALUES (NULL,'DJ Jack Frost à la Patinoire','1 Place de France 34000 Montpellier',3.915228,43.603076,'SHOWCASE','2019-12-11 18:00:00','2019-12-12 04:00:00','C\'est la que ça glisse',NULL,NULL,'Aucun âge requis','2.jpg',1,5);
INSERT INTO EVENEMENT VALUES (NULL,'DJ Jack Frost à la Patinoire : 2ème Édition','1 Place de France 34000 Montpellier',3.915228,43.603076,'SHOWCASE','2020-12-13 18:00:00','2020-12-14 04:00:00','C\'est la que ça glisse',NULL,NULL,'Aucun âge requis','3.jpg',1,3);
INSERT INTO EVENEMENT VALUES (NULL,'Fête de la Musique','Place de la Comédie 34000 Montpellier',3.879881,43.608775,'CONCERT', '2020-06-21 20:00:00', '2020-06-22 00:00:00', 'On va retourner la fac Ouais !', 100, 1000, 'Aucun âge requis', '4.jpg', 0,5);
INSERT INTO EVENEMENT VALUES (NULL,'Randonnée au Pic Saint-Loup','Pic Saint-Loup 34270 Valflaunès',3.811512,43.778966,'SPORT', '2019-12-07 11:59:00', '2019-12-07 12:59:00', 'Ensemble on va escalader le haut de massane après avoir manger deux fois des bananes ', 0, 50, 'Majeur', '5.jpg', 1, 5);
INSERT INTO EVENEMENT VALUES (NULL,'Tournoi LaserGame : Jour 1','Allée d\'Ulysse, Odysseum 34000 Montpellier',3.916946,43.603610,'SPORT', '2020-02-05 16:00:00', '2020-02-05 23:00:00', 'Tournoi annuel de LaserGame.', 0, 50, 'Mineur (à partir de 16 ans)', '6.JPG', 1, 3);
INSERT INTO EVENEMENT VALUES (NULL,'Marché de Noël','Esplanade Charles-de-Gaulle 34000 Montpellier',3.881403,43.611142,'FAMILIAL', '2019-11-27 10:00:00', '2019-12-28 21:00:00', 'Marché de noel', 0, 50, 'Aucun âge requis', '7.JPG', 1, 3);
INSERT INTO EVENEMENT VALUES (NULL,'Tournoi LaserGame : Jour 2','Allée d\'Ulysse, Odysseum 34000 Montpellier',3.916946,43.603610,'SPORT', '2020-02-10 16:00:00', '2020-02-10 23:00:00', 'Tournoi annuel de LaserGame.', 0, 50, 'Mineur (à partir de 16 ans)', '6.JPG', 0, 3);
INSERT INTO EVENEMENT VALUES (NULL,'Exemen du semestre 5 (Licencec 3 Informatique)','Place Eugène Bataillon 34090 Montpellier',3.863896,43.632835,'ÉTUDIANT', '2020-01-07 08:00:00', '2020-01-15 18:00:00', 'Puisse le sort vous être favorable !', 0, 150, 'Mineur (à partir de 16 ans)', '8.gif', 1, 3);



INSERT INTO PARTICIPE VALUES (1,1);
INSERT INTO PARTICIPE VALUES (1,3);
INSERT INTO PARTICIPE VALUES (6,2);
INSERT INTO PARTICIPE VALUES (5,2);
INSERT INTO PARTICIPE VALUES (5,1);
INSERT INTO PARTICIPE VALUES (2,3);
INSERT INTO PARTICIPE VALUES (5,3);

INSERT INTO NOTATION VALUES (1,1,4);

-- --------------------------------------------------------

--
-- Trigger
--

-- 
DROP TRIGGER IF EXISTS NON_DANS_ROLE;
DELIMITER $$
CREATE TRIGGER NON_DANS_ROLE
  BEFORE INSERT ON ROLE
  FOR EACH ROW
BEGIN
  IF NEW.ID_R < 0 OR NEW.ID_R > 2 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("VOUS NE POUVEZ PAS CREER DE ROLE !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "VOUS NE POUVEZ PAS CREER DE ROLE !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS AGE_REQUIS;
DELIMITER $$
CREATE TRIGGER AGE_REQUIS
  BEFORE INSERT ON PARTICIPE
  FOR EACH ROW
BEGIN
	DECLARE MIN varchar(30);
	DECLARE age_P int(2);
	SET MIN = (SELECT AGE_MIN FROM EVENEMENT WHERE ID_E =NEW.ID_E);
	SET age_P = (SELECT CALCUL_AGE_PERSONNE(NEW.ID_P)); -- Appel de la fonction AGE_PERSONNE définie ci-dessous

  IF (MIN = 'Mineur (à partir de 16 ans)' AND age_P < 16) OR (MIN = 'Majeur' AND age_P < 18) THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("VOTRE AGE NE VOUS PERMET PAS DE S'INSCRIRE À CET EVENEMENT !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "VOTRE AGE NE VOUS PERMET PAS DE S'INSCRIRE à CET EVENEMENT !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS ROLE_EXIST;
DELIMITER $$
CREATE TRIGGER ROLE_EXIST
  BEFORE INSERT ON PERSONNE
  FOR EACH ROW
BEGIN
  IF NEW.ID_R < 0 OR NEW.ID_R > 2 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("VOUS DEVEZ CHOISIR UN ROLE ENTRE 'ADMINISTRATEUR(0)', 'CONTRIBUTEUR(1)' OU 'VISITEUR(2)' !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "VOUS DEVEZ CHOISIR UN ROLE ENTRE 'ADMINISTRATEUR(0)', 'CONTRIBUTEUR(1)' OU 'VISITEUR(2)' !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS ACCEES_PRIORITAIRE;
DELIMITER $$
CREATE TRIGGER ACCES_PRIORITAIRE
  BEFORE INSERT ON EVENEMENT 
  FOR EACH ROW
BEGIN
  DECLARE var int(4);
  SET var = (SELECT ID_R FROM PERSONNE WHERE ID_P=NEW.ID_P);
  IF var != 1 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("SEUL LES CONTRIBUTEURS PEUVENT AJOUTER UN EVENEMENT !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "SEUL LES CONTRIBUTEURS PEUVENT AJOUTER UN EVENEMENT !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS DEPASSE_DATE;
DELIMITER $$
CREATE TRIGGER DEPASSE_DATE
  BEFORE INSERT ON EVENEMENT 
  FOR EACH ROW
BEGIN
  IF EVENT_PASSE(NEW.ID_E) = 1 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("LA DATE DE L'EVENEMENT QUE VOUS ESSAYER D'AJOUTER EST DEPASSE !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "LA DATE DE L'EVENEMENT QUE VOUS ESSAYER D'AJOUTER EST DEPASSE !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS PAS_DE_PLACE;
DELIMITER $$
CREATE TRIGGER PAS_DE_PLACE
  BEFORE INSERT ON PARTICIPE 
  FOR EACH ROW
BEGIN
	DECLARE RESULTAT VARCHAR(50);
	SET RESULTAT= (SELECT NB_PLACE(NEW.ID_E)); -- appel de le focntion NB_PLACE definie ci-dessous
  IF RESULTAT ="Il n'y a plus de places de disponibles !" THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("DESOLE ON PEUT PAS VOUS INSCRIRE DANS CET EVENEMENT, LA SALLE EST PLEINE !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "DESOLE ON PEUT PAS VOUS INSCRIRE DANS CET EVENEMENT, LA SALLE EST PLEINE !";
  END IF;
END; $$
DELIMITER ;



DROP TRIGGER IF EXISTS DISTANCE_AUTORISEE;
DELIMITER $$
CREATE TRIGGER DISTANCE_AUTORISEE
	BEFORE INSERT ON EVENEMENT
	FOR EACH ROW
BEGIN
	DECLARE DIS decimal(11,8);
	SET DIS = (SELECT DISTANCE_ENTRE_ADRESSE(NEW.LONGITUDE,NEW.LATITUDE)); -- appel de le focntion DISTANCE_ENTRE_ADRESSE definie ci-dessous
  IF DIS > 30.0 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("L'EVENEMENT NE PEUT PAS ETRE A PLUS DE 30KM AUTOUR MONTPELLIER !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "L'EVENEMENT NE PEUT PAS ETRE A PLUS DE 30KM AUTOUR MONTPELLIER !";
  END IF;
END; $$
DELIMITER ;


DROP TRIGGER IF EXISTS NOTATION_EVENT_PAS_PASSE;
DELIMITER $$
CREATE TRIGGER NOTATION_EVENT_PAS_PASSE
  BEFORE INSERT ON NOTATION
  FOR EACH ROW
BEGIN

  IF EVENT_PASSE(NEW.ID_E) = 0 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("L'EVENEMENT N'A PAS ENCORE EU LIEU !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "L'EVENEMENT N'A PAS ENCORE EU LIEU !";
  END IF;
END; $$
DELIMITER ;


DROP TRIGGER IF EXISTS NOTATION_PARTICIPE_PAS;
DELIMITER $$
CREATE TRIGGER NOTATION_PARTICIPE_PAS
  BEFORE INSERT ON NOTATION
  FOR EACH ROW
BEGIN
  DECLARE participe int(4);
  SET participe = (Select COUNT(*) FROM PARTICIPE WHERE PARTICIPE.ID_E=NEW.ID_E AND PARTICIPE.ID_P=NEW.ID_P);
  IF participe = 0 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("VOUS NE POUVEZ PAS NOTER, CAR VOUS N'AVEZ PAS PARTICIPÉ A L'EVENEMENT !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "VOUS NE POUVEZ PAS NOTER, CAR VOUS N'AVEZ PAS PARTICIPÉ A L'EVENEMENT !";
  END IF;  
END; $$
DELIMITER ;


DROP TRIGGER IF EXISTS NOTATION_LIMITE;
DELIMITER $$
CREATE TRIGGER NOTATION_LIMITE
  BEFORE INSERT ON NOTATION
  FOR EACH ROW
BEGIN
  IF NEW.NOTE < 0 OR NEW.NOTE > 5 THEN
    INSERT INTO LOGERROR(MESSAGE) VALUES ("LA NOTE DOIT ETRE COMPRIS ENTRE 0 ET 5 !");
    SIGNAL SQLSTATE VALUE '45000' SET MESSAGE_TEXT = "LA NOTE DOIT ETRE COMPRIS ENTRE 0 ET 5 !";
  END IF;
END; $$
DELIMITER ;


-- --------------------------------------------------------

--
-- Fonctions
--


DROP FUNCTION IF EXISTS NB_PLACE
DELIMITER $$
CREATE FUNCTION NB_PLACE (ID_E int(4))
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
  DECLARE NB int(7);
  DECLARE NB_MAX int(7);

  SET NB = (SELECT COUNT(*) FROM PARTICIPE WHERE PARTICIPE.ID_E=ID_E);
  SET NB_MAX = (SELECT EFFECTIF_MAX FROM EVENEMENT WHERE EVENEMENT.ID_E=ID_E);
  IF NB_MAX IS NULL THEN
    RETURN("Les places de cet évènement sont illimitées !");
  ELSE
    IF NB < NB_MAX THEN
      RETURN CONCAT("Il reste ",CONCAT(NB_MAX-NB," place(s) disponible(s) !"));
    ELSE
      RETURN("Il n'y a plus de places de disponibles !");
    END IF;
  END IF;
END; $$
DELIMITER ;



DROP FUNCTION IF EXISTS JOURS_AVANT_EVENT
DELIMITER $$
CREATE FUNCTION JOURS_AVANT_EVENT (ID_E int(4))
RETURNS VARCHAR(50)
DETERMINISTIC
BEGIN
  	DECLARE DATE_eve TIMESTAMP;
    DECLARE nbJour int(4);
  	DECLARE resultat VARCHAR(70);

  SET DATE_eve = (SELECT DATE_D FROM EVENEMENT WHERE EVENEMENT.ID_E=ID_E);
  SET nbJour = (Select TIMESTAMPDIFF(DAY,NOW(),DATE_eve));
  SET resultat = "il reste";

    IF nbJour >= 0  THEN
      SET resultat =CONCAT(resultat, CONCAT(" ",CONCAT(nbJour," jours(s)")));
    ELSE
		  SET resultat ="CET EVENEMENT S'EST DEJA DEROULE";
	  END IF;

  RETURN (resultat);
END; $$
DELIMITER ;


DROP FUNCTION IF EXISTS CALCUL_AGE_PERSONNE
DELIMITER $$
CREATE FUNCTION CALCUL_AGE_PERSONNE (ID_Per int(4))
RETURNS int(3)
DETERMINISTIC
BEGIN
  DECLARE age_P int(3);
  DECLARE AGE_Now int(3);
  SET AGE_Now = (SELECT year(now()));

  SET age_P = (SELECT year(DATE_NAISSANCE) FROM PERSONNE WHERE ID_P=ID_Per);
  RETURN(AGE_Now - age_P);
END; $$
DELIMITER ;


DROP FUNCTION IF EXISTS DUREE_EVENT
DELIMITER $$
CREATE FUNCTION DUREE_EVENT(ID_eve int(4))
RETURNS int(5)
DETERMINISTIC
BEGIN
	DECLARE debut TIMESTAMP ;
	DECLARE fin TIMESTAMP ;
	DECLARE resultat int(5);
	SET debut = (SELECT DATE_D from EVENEMENT WHERE ID_E = ID_eve);
	SET fin = (SELECT DATE_F from EVENEMENT WHERE ID_E = ID_eve);
	SET resultat = (select TIMESTAMPDIFF(HOUR,debut,fin));

	RETURN (resultat);
END; $$
DELIMITER ;	



DROP FUNCTION IF EXISTS NB_PERSONNE_INSCRIT
DELIMITER $$
CREATE FUNCTION NB_PERSONNE_INSCRIT (ID_eve int(4))
RETURNS int(6)
DETERMINISTIC
BEGIN
  DECLARE resultat int(6);
 
  SET resultat = (SELECT count(*) FROM PARTICIPE WHERE ID_E = ID_eve);

  RETURN(resultat);
END; $$
DELIMITER ;



DROP FUNCTION IF EXISTS DISTANCE_ENTRE_ADRESSE --distance entre (longitude/latitude du centre de montpellier et longitude/latitude quelconques passer en parametre)
DELIMITER $$
CREATE FUNCTION DISTANCE_ENTRE_ADRESSE (longitude decimal(11,8), latitude decimal(10,8))
RETURNS decimal(11,8)
DETERMINISTIC
BEGIN
  DECLARE SPHERE_TERRE int(7);
  DECLARE LONGITUDE_MTP decimal(11,8);
  DECLARE LATITUDE_MTP decimal(10,8);
  DECLARE RADIAN_LON_MTP decimal(11,8);
  DECLARE RADIAN_LAT_MTP decimal(11,8);
  DECLARE RADIAN_NEW_LON decimal(11,8);
  DECLARE RADIAN_NEW_LAT decimal(11,8);
  DECLARE DIST_LON decimal(11,8);
  DECLARE DIST_LAT decimal(11,8);
  DECLARE ETAPE1  decimal(11,8);
  DECLARE ETAPE2  decimal(11,8);
  DECLARE resultat  decimal(11,8);

  SET LONGITUDE_MTP = 3.879446; -- longitude du centre de montpellier
  SET LATITUDE_MTP = 43.608177; -- latitude du centre de montpellier 
  SET SPHERE_TERRE = 6378137; -- sphere de la terre est egale 6378137 km de rayon
  SET RADIAN_LON_MTP = RADIANS(LONGITUDE_MTP); -- conversion de degré en radian
  SET RADIAN_LAT_MTP = RADIANS(LATITUDE_MTP);  -- ............................
  SET RADIAN_NEW_LON = RADIANS(longitude);    -- ..........................
  SET RADIAN_NEW_LAT = RADIANS(latitude);      -- .........................
  SET DIST_LON = (RADIAN_NEW_LON - RADIAN_LON_MTP)/2; -- moyenne de la difference entre 2 longitude
  SET DIST_LAT = (RADIAN_NEW_LAT - RADIAN_LAT_MTP)/2; -- moyenne de la difference entre 2 latitude
  SET ETAPE1 = POWER(SIN(DIST_LAT),2) + (COS(RADIAN_LAT_MTP)*COS(RADIAN_NEW_LAT)*POWER(SIN(DIST_LON),2)); -- formule de la distance entre deux coordonnees de la terre
  SET ETAPE2 = 2 * ATAN2(SQRT(ETAPE1),SQRT(1 - ETAPE1)); -- suite de la formule......................
  SET resultat = (SPHERE_TERRE * ETAPE2)/1000; -- multiplication par le rayon de la terre pour ne pas avoir une distance superieur à la circonferance de la terre et on divise par 1000 pour avoir la distance en km

  RETURN(resultat);
END; $$
DELIMITER ;



DROP FUNCTION IF EXISTS EVENT_PASSE
DELIMITER $$
CREATE FUNCTION EVENT_PASSE (ID_eve int(4))
RETURNS tinyint(1)
DETERMINISTIC
BEGIN
  DECLARE DATE_E timestamp;
  SET DATE_E = (SELECT DATE_F FROM EVENEMENT WHERE ID_E=ID_eve);
  IF TIMESTAMPDIFF(DAY,NOW(),DATE_E) < 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END; $$
DELIMITER ;